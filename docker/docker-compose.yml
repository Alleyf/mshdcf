#name: mshdcf
version: '1.0.0'
services:
  #################################################################################################
  #################################### 系统基本必要中间件 #########################################
  #################################################################################################
  mysql:
    image: mysql:8.0.31
    container_name: mysql
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # root 密码
      MYSQL_ROOT_PASSWORD: 123456
      # 初始化数据库
      MYSQL_DATABASE: ry-crawl
    ports:
      - "3306:3306"
    volumes:
      # 数据挂载
      - A:/docker/mysql/v8/data/:/var/lib/mysql/
      # 配置挂载
      - A:/docker/mysql/v8/conf/:/etc/mysql/conf.d/
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    privileged: true
    restart: always
    #        #    network_mode: "host"
    networks:
      - mynetwork

  mysql-5:
    image: mysql:5.7.36
    container_name: mysql-5
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # root 密码
      MYSQL_ROOT_PASSWORD: 123456
      # 初始化数据库
      MYSQL_DATABASE: ry-crawl
    ports:
      - "33060:3306"
    volumes:
      # 数据挂载
      - A:/docker/mysql/v5/data/:/var/lib/mysql/
      # 配置挂载
      - A:/docker/mysql/v5/conf/:/etc/mysql/conf.d/
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    privileged: true
    #        #    network_mode: "host"
    networks:
      - mynetwork

  nacos:
    image: alleyf/nacos:1.8.2
    container_name: nacos
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    environment:
      TZ: Asia/Shanghai
      JAVA_OPTS: "-Xms256m -Xmx512m"
    volumes:
      # 日志目录 注意集群模式下 日志目录不能一致 需要区分例如 nacos1 nacos2
      - A:/docker/nacos/logs/:/root/nacos/logs
      # 集群配置文件 集群所有nacos都必须使用此文件
      - A:/docker/nacos/conf/cluster.conf:/root/nacos/conf/cluster.conf
  #    network_mode: "host"
  #    networks:
  #      - mynetwork

  redis:
    image: redis:6.2.7
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 配置文件
      - A:/docker/redis/conf:/redis/config
      # 数据文件
      - A:/docker/redis/data/:/redis/data/
    command: "redis-server /redis/config/redis.conf"
    #    privileged: true
    restart: always
  #    network_mode: "host"
  #    networks:
  #      - mynetwork

  minio:
    image: alleyf/minio:RELEASE.2023-03-24T21-41-23Z
    container_name: minio
    ports:
      # api 端口
      - "9000:9000"
      # 控制台端口
      - "9001:9001"
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # 管理后台用户名
      MINIO_ROOT_USER: admin
      # 管理后台密码，最小8个字符
      MINIO_ROOT_PASSWORD: alleyfminio
      # https需要指定域名
      #MINIO_SERVER_URL: "https://xxx.com:9000"
      #MINIO_BROWSER_REDIRECT_URL: "https://xxx.com:9001"
      # 开启压缩 on 开启 off 关闭
      MINIO_COMPRESS: "off"
      # 扩展名 .pdf,.doc 为空 所有类型均压缩
      MINIO_COMPRESS_EXTENSIONS: ""
      # mime 类型 application/pdf 为空 所有类型均压缩
      MINIO_COMPRESS_MIME_TYPES: ""
    volumes:
      # 映射当前目录下的data目录至容器内/data目录
      - A:/docker/minio/data:/data
      # 映射配置目录
      - A:/docker/minio/config:/root/.minio/
    command: server --address ':9000' --console-address ':9001' /data  # 指定容器中的目录 /data
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork

  seata-server:
    image: ruoyi/ruoyi-seata-server:1.8.1
    container_name: seata-server
    ports:
      - "7091:7091"
      - "8091:8091"
    environment:
      TZ: Asia/Shanghai
      # 注意 此处ip如果是外网使用 要改为外网ip
      # SEATA_IP: 127.0.0.1
      SEATA_PORT: 8091
    volumes:
      - A:/docker/ruoyi-seata-server/logs/:/ruoyi/seata-server/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork

  nginx-web:
    image: nginx:1.22.1
    container_name: nginx-web
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 证书映射
      - A:/docker/nginx/cert:/etc/nginx/cert
      # 配置文件映射
      - A:/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      # 页面目录
      - A:/docker/nginx/html:/usr/share/nginx/html
      # 日志目录
      - A:/docker/nginx/log:/var/log/nginx
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork

  sentinel:
    image: ruoyi/ruoyi-sentinel-dashboard:1.8.1
    container_name: sentinel
    environment:
      TZ: Asia/Shanghai
    ports:
      - "8718:8718"
    volumes:
      # 配置文件
      - A:/docker/ruoyi-sentinel-dashboard/logs/:/ruoyi/sentinel-dashboard/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    restart: always
    #    network_mode: "host"
    networks:
      - mynetwork


  #################################################################################################
  #################################### 以下为扩展根据需求搭建 #########################################
  #################################################################################################

  elasticsearch:
    image: alleyf/elasticsearch:7.17.6
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      # 设置集群名称
      cluster.name: elasticsearch
      # 以单一节点模式启动
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - A:/docker/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins
      - A:/docker/elk/elasticsearch/data:/usr/share/elasticsearch/data
      - A:/docker/elk/elasticsearch/logs:/usr/share/elasticsearch/logs
      #    network_mode: "host"
    restart: always
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3.10.6
    container_name: rabbitmq
    #    build:
    #      context: ./rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "15672:15672" # 管理界面端口
      - "5672:5672"   # api 端口
    volumes:
      - A:/docker/rabbitmq/log:/var/log/rabbitmq
      - A:/docker/rabbitmq/data:/var/lib/rabbitmq
    #      - A:/docker/rabbitmq/plugins:/plugins
    #        network_mode: "bridge"
    restart: always
    # networks:
    #   - mynetwork


  crawlab:
    image: alleyf/crawlab
    container_name: crawlab
    environment:
      CRAWLAB_NODE_MASTER: "Y"
      CRAWLAB_MONGO_HOST: "mongo"  #
      CRAWLAB_MONGO_PORT: "27017"  # mongo port
      CRAWLAB_MONGO_DB: "crawlab"  # mongo database
    volumes:
      - "A:/docker/crawlab/data:/root/.crawlab"  # 持久化 crawlab 元数据
      - "A:/docker/crawlab/data:/data"  # 持久化 crawlab 数据
      - "A:/docker/crawlab/log:/var/logs/crawlab" # 持久化 crawlab 任务日志
    ports:
      - "8180:8080"
    depends_on:
      - mongo
      # network_mode: "bridge"
      # networks:
      # - mynetwork


  mongo:
    image: mongo:4.2
    container_name: mongo
    ports:
      - "27017:27017"
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: "alleyf"  # mongo username
    #   MONGO_INITDB_ROOT_PASSWORD: "alleyfmongo"  # mongo password
    volumes:
      - A:/docker/mongo/config:/data/configdb
      - A:/docker/mongo/data/db:/data/db
      # network_mode: "bridge"
      # networks:
      # - mynetwork


  metabase:
    image: metabase/metabase
    container_name: metabase
    # restart: always
    # volumes:
    #   - A:/docker/dataease/conf:/opt/dataease/conf/
    ports:
      - "11210:3000"
    networks:
      - mynetwork

  maxkb:
    image: 1panel/maxkb:latest
    container_name: maxkb
    ports:
      - "8190:8080"
    volumes:
      - A:/docker/maxkb/data:/var/lib/postgresql/data
    # networks:
    #   - mynetwork


  #################################################################################################
  #################################### mshdcf系统微服务 #########################################
  #################################################################################################


  ruoyi-monitor:
    image: ruoyi/ruoyi-monitor:1.8.1
    container_name: ruoyi-monitor
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9100:9100"
    volumes:
      # 配置文件
      - A:/docker/ruoyi-monitor/logs/:/ruoyi/monitor/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork


  ruoyi-gateway:
    image: alleyf/ruoyi-gateway:1.8.1
    container_name: ruoyi-gateway
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "8080:8080"
    #    volumes:
    # 配置文件
    #      - A:/docker/mshdcf/ruoyi-gateway/logs/:/alleyf/gateway/logs
    #      # skywalking 探针
    #      - A:/docker/ruoyiCloudPlus/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    #    restart: always
    # 与nacos 注册中心通信
    depends_on:
      - nacos
    networks:
      - mynetwork

  ruoyi-auth:
    image: alleyf/ruoyi-auth:1.8.1
    container_name: ruoyi-auth
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9210:9210"
    volumes:
      # 配置文件
      - A:/docker/mshdcf/ruoyi-auth/logs/:/ruoyi/auth/logs
      # skywalking 探针
      - A:/docker/mshdcf/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
  #    network_mode: "host"
  #    networks:
  #      - mynetwork

  ruoyi-system:
    image: alleyf/ruoyi-system:1.8.1
    container_name: ruoyi-system
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9201:9201"
    volumes:
      # 配置文件
      - A:/docker/mshdcf/ruoyi-system/logs/:/ruoyi/system/logs
      # skywalking 探针
      - A:/docker/mshdcf/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
  #    network_mode: "host"
  #    networks:
  #      - mynetwork

  ruoyi-gen:
    image: ruoyi/ruoyi-gen:1.8.1
    container_name: ruoyi-gen
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9202:9202"
    volumes:
      # 配置文件
      - A:/docker/ruoyi-gen/logs/:/ruoyi/gen/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork

  ruoyi-job:
    image: ruoyi/ruoyi-job:1.8.1
    container_name: ruoyi-job
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9203:9203"
    volumes:
      # 配置文件
      - A:/docker/ruoyi-job/logs/:/ruoyi/job/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork

  ruoyi-resource:
    image: ruoyi/ruoyi-resource:1.8.1
    container_name: ruoyi-resource
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "9204:9204"
    volumes:
      # 配置文件
      - A:/docker/ruoyi-resource/logs/:/ruoyi/resource/logs
      # skywalking 探针
      - A:/docker/skywalking/agent/:/ruoyi/skywalking/agent
    privileged: true
    #    network_mode: "host"
    networks:
      - mynetwork







networks:
  mynetwork:
    driver: bridge
    external: true
